Table LogEntry {
  id auto [pk, unique]
  action_time date_time [default:`django.utils.timezone.now()`]
  user foreign_key 
  content_type foreign_key [null]
  object_id text [null]
  object_repr char 
  action_flag positive_small_integer 
  change_message text 
  Note: '''LogEntry(id, action_time, user, content_type, object_id, object_repr, action_flag, change_message)'''
}
ref: LogEntry.user > User.id
ref: LogEntry.content_type > ContentType.id


Table Permission {
  id auto [pk, unique]
  name char 
  content_type foreign_key 
  codename char 
  Note: '''
    The permissions system provides a way to assign permissions to specific
    users and groups of users.

    The permission system is used by the Django admin site, but may also be
    useful in your own code. The Django admin site uses permissions as follows:

        - The "add" permission limits the user's ability to view the "add" form
          and add an object.
        - The "change" permission limits a user's ability to view the change
          list, view the "change" form and change an object.
        - The "delete" permission limits the ability to delete an object.
        - The "view" permission limits the ability to view an object.

    Permissions are set globally per type of object, not per specific object
    instance. It is possible to say "Mary may change news stories," but it's
    not currently possible to say "Mary may change news stories, but only the
    ones she created herself" or "Mary may only change news stories that have a
    certain status or publication date."

    The permissions listed above are automatically created for each model.
    '''
}
ref: Permission.content_type > ContentType.id


Table Group {
  id auto [pk, unique]
  name char [unique]
  Note: '''
    Groups are a generic way of categorizing users to apply permissions, or
    some other label, to those users. A user can belong to any number of
    groups.

    A user in a group automatically has all the permissions granted to that
    group. For example, if the group 'Site editors' has the permission
    can_edit_home_page, any user in that group will have that permission.

    Beyond permissions, groups are a convenient way to categorize users to
    apply some label, or extended functionality, to them. For example, you
    could create a group 'Special users', and you could write code that would
    do special things to those users -- such as giving them access to a
    members-only portion of your site, or sending them members-only email
    messages.
    '''
}


Table auth_group_permissions {
  permission_id auto [pk]
  group_id auto [pk]
}
ref: Group.id > auth_group_permissions.group_id
ref: Permission.id > auth_group_permissions.permission_id


Table User {
  id auto [pk, unique]
  password char 
  last_login date_time [null]
  is_superuser boolean [note:"Designates that this user has all permissions without explicitly assigning them.", default:`False`]
  username char [note:"Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.", unique]
  first_name char 
  last_name char 
  email email 
  is_staff boolean [note:"Designates whether the user can log into this admin site.", default:`False`]
  is_active boolean [note:"Designates whether this user should be treated as active. Unselect this instead of deleting accounts.", default:`True`]
  date_joined date_time [default:`django.utils.timezone.now()`]
  Note: '''
    Users within the Django authentication system are represented by this
    model.

    Username and password are required. Other fields are optional.
    '''
}


Table auth_user_groups {
  group_id auto [pk]
  user_id auto [pk]
}
ref: User.id > auth_user_groups.user_id
ref: Group.id > auth_user_groups.group_id


Table auth_user_user_permissions {
  permission_id auto [pk]
  user_id auto [pk]
}
ref: User.id > auth_user_user_permissions.user_id
ref: Permission.id > auth_user_user_permissions.permission_id


Table ContentType {
  id auto [pk, unique]
  app_label char 
  model char 
  Note: '''ContentType(id, app_label, model)'''
}


Table Session {
  session_key char [pk, unique]
  session_data text 
  expire_date date_time 
  Note: '''
    Django provides full support for anonymous sessions. The session
    framework lets you store and retrieve arbitrary data on a
    per-site-visitor basis. It stores data on the server side and
    abstracts the sending and receiving of cookies. Cookies contain a
    session ID -- not the data itself.

    The Django sessions framework is entirely cookie-based. It does
    not fall back to putting session IDs in URLs. This is an intentional
    design decision. Not only does that behavior make URLs ugly, it makes
    your site vulnerable to session-ID theft via the "Referer" header.

    For complete documentation on using Sessions in your code, consult
    the sessions documentation that is shipped with Django (also available
    on the Django web site).
    '''
}


Table Birds {
  id big_auto [pk, unique]
  species char 
  Note: '''Birds(id, species)'''
}


Table Observations {
  id big_auto [pk, unique]
  owner foreign_key 
  bird foreign_key 
  audio_file file [note:"Mono | less than 2 minuets | lower then 5MB"]
  comment char [note:"Tell us About Your Observation"]
  uploaded_at date_time 
  country None [note:"Where the Audio was Recorded", null]
  audio_duration float [note:"Duration of the audio in seconds", null]
  audio_quality integer [null]
  Note: '''Observations(id, owner, bird, audio_file, comment, uploaded_at, country, audio_duration, audio_quality)'''
}
ref: Observations.owner > User.id
ref: Observations.bird > Birds.id


Table Spectrogram_files {
  id big_auto [pk, unique]
  observations foreign_key 
  spectrogram_file file 
  Note: '''Spectrogram_files(id, observations, spectrogram_file)'''
}
ref: Spectrogram_files.observations > Observations.id


Table UserSocialAuth {
  id big_auto [pk, unique]
  user foreign_key 
  provider char 
  uid char 
  extra_data j_s_o_n [default:`builtins.dict()`]
  created date_time 
  modified date_time 
  Note: '''Social Auth association model'''
}
ref: UserSocialAuth.user > User.id


Table Nonce {
  id big_auto [pk, unique]
  server_url char 
  timestamp integer 
  salt char 
  Note: '''One use numbers'''
}


Table Association {
  id big_auto [pk, unique]
  server_url char 
  handle char 
  secret char 
  issued integer 
  lifetime integer 
  assoc_type char 
  Note: '''OpenId account association'''
}


Table Code {
  id big_auto [pk, unique]
  email email 
  code char 
  verified boolean [default:`False`]
  timestamp date_time 
  Note: '''Code(id, email, code, verified, timestamp)'''
}


Table Partial {
  id big_auto [pk, unique]
  token char 
  next_step positive_small_integer [default:`0`]
  backend char 
  data j_s_o_n [default:`builtins.dict()`]
  timestamp date_time 
  Note: '''Partial(id, token, next_step, backend, data, timestamp)'''
}


Table Tag {
  id auto [pk, unique]
  name char [unique]
  slug slug [unique]
  Note: '''Tag(id, name, slug)'''
}


Table TaggedItem {
  id auto [pk, unique]
  tag foreign_key 
  content_type foreign_key 
  object_id integer 
  content_object None 
  Note: '''TaggedItem(id, tag, content_type, object_id)'''
}
ref: TaggedItem.tag > Tag.id
ref: TaggedItem.content_type > ContentType.id


